package com.example.demo.dao;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cglib.core.CollectionUtils;
import org.springframework.orm.jpa.LocalEntityManagerFactoryBean;
import org.springframework.stereotype.Repository;

import com.example.demo.entity.LocalityEntity;
import com.example.demo.entity.WaterTankEntity;
import com.example.demo.pojo.Locality;
import com.example.demo.pojo.WaterTank;
import com.example.demo.repository.LocalityRepository;
import com.example.demo.repository.WaterTankRepository;

@Repository
public class LocalityDao {
	
	@Autowired
	private LocalityRepository localityRepository;
	
	@Autowired
	private WaterTankRepository waterTankRepository;
	

	public Locality addLocalityWithWaterTank(Locality locality) {
		LocalityEntity localityEntity = convertLocalityToLocalityEntity(locality);
		waterTankRepository.saveAll(localityEntity.getWaterTanks());
		localityRepository.save(localityEntity);
		
		
		Optional<LocalityEntity> localityEntityDb = localityRepository.findById(localityEntity.getId());
		if(localityEntityDb.isPresent()) {
			locality = convertLocalityEntityToLocality(localityEntityDb.get());
			return locality;
		}
		return null;
	}
	
	public List<Locality> findAllLocality() {
		List<LocalityEntity> localityEntityList = localityRepository.findAll();
		if(localityEntityList.size() >0) {
			return localityEntityList.stream().map(localityEntity -> convertLocalityEntityToLocality(localityEntity)).collect(Collectors.toList());
		}
		return null;
	}
	
	public Locality findLocalityById(Integer id) {
		Optional<LocalityEntity> localityEntity = localityRepository.findById(id);
		if(localityEntity.isPresent()) {
			return convertLocalityEntityToLocality(localityEntity.get());
		}
		return null;
	}
	
	public Locality updateLocality(Locality locality) {
		
		Optional<LocalityEntity> localityEntityOptional = localityRepository.findById(locality.getLocalityId());
		if(localityEntityOptional.isPresent()) {
			LocalityEntity localityEntity = localityEntityOptional.get();
			localityEntity.setLocality(locality.getLocality());
			localityEntity.setStreetName(locality.getStreetName());
			localityEntity.setCity(locality.getCity());
			
			List<WaterTankEntity> waterTankEntityList = new ArrayList<>();
			for (WaterTank waterTank : locality.getWaterTanks()) {
				WaterTankEntity waterTanksEntity = new WaterTankEntity();
				waterTanksEntity.setCapacity(waterTank.getCapacity());
				waterTanksEntity.setLastCleanedDate(waterTank.getLastCleanedDate());
				waterTankRepository.saveAndFlush(waterTanksEntity);
				waterTankEntityList.add(waterTanksEntity);
			}

			localityEntity.setWaterTanksEntity(waterTankEntityList);

			localityRepository.saveAndFlush(localityEntity);
			waterTankRepository.saveAll(localityEntity.getWaterTanks());
			
			localityRepository.save(localityEntity);
			
			localityEntityOptional = localityRepository.findById(locality.getLocalityId());
			return convertLocalityEntityToLocality(localityEntityOptional.get());
		}
		return null;
	}
	
	public List<Locality> deleteLocality(Integer localityId) {
		localityRepository.deleteById(localityId);
		return findAllLocality();
	}
	
	private static LocalityEntity convertLocalityToLocalityEntity(Locality locality) {
		LocalityEntity localityEntity = new LocalityEntity();
		localityEntity.setId(locality.getLocalityId());
		localityEntity.setLocality(locality.getLocality());
		localityEntity.setStreetName(locality.getStreetName());
		localityEntity.setCity(locality.getCity());
		
		List<WaterTankEntity> waterEntityList = locality.getWaterTanks()
				.stream()
				.map(e-> convertWaterTankToWaterTankEntity(e,null))
				.collect(Collectors.toList());
		
		localityEntity.setWaterTanks(waterEntityList);
		return localityEntity;	
	}

	
	 private static Locality convertLocalityEntityToLocality(LocalityEntity localityEntity) {
			Locality locality = new Locality();
			locality.setLocalityId(localityEntity.getId());
			locality.setLocality(localityEntity.getLocality());
			locality.setStreetName(localityEntity.getStreetName());
			locality.setCity(localityEntity.getCity());
			
			List<WaterTank> waterTankList = localityEntity.getWaterTanks()
					.stream()
					.map(e-> convertWaterTankEntityToWaterTank(e))
					.collect(Collectors.toList());
			
			locality.setWaterTanks(waterTankList);
			return locality;
	 }
	 
	
	private static WaterTankEntity convertWaterTankToWaterTankEntity(WaterTank waterTank, WaterTankEntity waterTankEntity) {
		if(waterTankEntity == null) {
			waterTankEntity = new WaterTankEntity();
		}
		waterTankEntity.setLocalityId(waterTank.getLocalityId());
		waterTankEntity.setCapacity(waterTank.getCapacity());
		waterTankEntity.setLastCleanedDate(waterTank.getLastCleanedDate());
		return waterTankEntity;
	}

	private static WaterTank convertWaterTankEntityToWaterTank(WaterTankEntity waterTankEntity) {
		WaterTank waterTank = new WaterTank();
		waterTank.setLocalityId(waterTankEntity.getLocalityId());
		waterTank.setCapacity(waterTankEntity.getCapacity());
		waterTank.setLastCleanedDate(waterTankEntity.getLastCleanedDate());
		return waterTank;
	}
	
}
